# -*- coding: utf-8 -*-
"""ResNet_on_GPU.

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1O3qe7OWjZg2i8dq16O2UP33lkdnvBPEL
"""

from tensorflow.keras import Sequential
from tensorflow.keras.layers import Conv2D, Flatten, Dense, GlobalAveragePooling2D
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.applications.resnet import ResNet50
from tensorflow.keras.preprocessing.image import ImageDataGenerator 
import numpy as np


def load_train(path):
    train_datagen = ImageDataGenerator(
        validation_split=0.25,
        rescale=1./255, 
        horizontal_flip=True)

   
    train_datagen_flow = (train_datagen.flow_from_directory(
        path,
        target_size=(150, 150),
        class_mode='sparse',
        subset='training',
        batch_size=16,
        seed=12345))
    

    return train_datagen_flow


def create_model(input_shape):
    path_weights = '/datasets/keras_models/resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5'
    backbone = ResNet50(input_shape=(150, 150, 3),
                    weights=path_weights,
                    include_top=False) 
    backbone.trainable = True

    model = Sequential()
    model.add(backbone)
    model.add(GlobalAveragePooling2D())
    model.add(Dense(12, activation='softmax')) 

    optimizer = Adam(lr=0.001) 
    model.compile(optimizer=optimizer, loss='sparse_categorical_crossentropy',
                  metrics=['acc'])
    


    return model


def train_model(model, train_data, test_data, epochs=5, batch_size=None,
               steps_per_epoch=None, validation_steps=None):
  
    train_datagen_flow = train_data

    if steps_per_epoch is None:
        steps_per_epoch = len(train_data)
    if validation_steps is None:
        validation_steps = len(test_data)

    model.fit(train_data, 
              validation_data=(test_data), epochs=epochs,
              steps_per_epoch=steps_per_epoch, batch_size=batch_size,
              validation_steps=validation_steps, 
              verbose=2, shuffle=True)
    return model